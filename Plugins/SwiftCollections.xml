<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SwiftCollections</name>
    </assembly>
    <members>
        <member name="T:SwiftCollections.Dimensions.Array2D`1">
            <summary>
            Represents a flattened 2D array with dynamic resizing and efficient access.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
        </member>
        <member name="M:SwiftCollections.Dimensions.Array2D`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SwiftCollections.Dimensions.Array2D`1"/> class.
            </summary>
        </member>
        <member name="M:SwiftCollections.Dimensions.Array2D`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SwiftCollections.Dimensions.Array2D`1"/> class with specified dimensions.
            </summary>
        </member>
        <member name="M:SwiftCollections.Dimensions.Array2D`1.#ctor(System.Int32,System.Int32,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:SwiftCollections.Dimensions.Array2D`1"/> class with specified dimensions and default value.
            </summary>
        </member>
        <member name="P:SwiftCollections.Dimensions.Array2D`1.Width">
            <summary>
            Gets the width of the 2D array.
            </summary>
        </member>
        <member name="P:SwiftCollections.Dimensions.Array2D`1.Height">
            <summary>
            Gets the height of the 2D array.
            </summary>
        </member>
        <member name="P:SwiftCollections.Dimensions.Array2D`1.InnerArray">
            <summary>
            Gets the underlying flattened array for direct access.
            </summary>
        </member>
        <member name="P:SwiftCollections.Dimensions.Array2D`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the element at the specified position in the 2D array.
            </summary>
            <param name="x">The zero-based X coordinate.</param>
            <param name="y">The zero-based Y coordinate.</param>
        </member>
        <member name="M:SwiftCollections.Dimensions.Array2D`1.AddRange(`0[0:,0:])">
            <summary>
            Adds the provides source into the current 2D Array.
            </summary>
            <remarks>
            Will overwrite current values.
            </remarks>
            <param name="source"></param>
        </member>
        <member name="M:SwiftCollections.Dimensions.Array2D`1.Fill(`0)">
            <summary>
            Fills the array with the specified value.
            </summary>
        </member>
        <member name="M:SwiftCollections.Dimensions.Array2D`1.Shift(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Shifts the elements in the array by the specified X and Y offsets.
            </summary>
            <param name="xShift">The offset to apply along the X-axis.</param>
            <param name="yShift">The offset to apply along the Y-axis.</param>
            <param name="wrap">
            Specifies whether to wrap elements that exceed the array's boundaries. 
            If <c>true</c>, values wrap around to the other side of the array.
            If <c>false</c>, values that exceed boundaries are discarded.
            </param>
        </member>
        <member name="M:SwiftCollections.Dimensions.Array2D`1.Clear">
            <summary>
            Clears all elements in the array.
            </summary>
        </member>
        <member name="M:SwiftCollections.Dimensions.Array2D`1.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes the 2D array to new dimensions, preserving existing values within the new bounds.
            </summary>
        </member>
        <member name="M:SwiftCollections.Dimensions.Array2D`1.ValidateIndex(System.Int32,System.Int32)">
            <summary>
            Validates the specified index coordinates.
            </summary>
        </member>
        <member name="M:SwiftCollections.Dimensions.Array2D`1.IsValidIndex(System.Int32,System.Int32)">
            <summary>
            Checks if the specified index is valid in the current array dimensions.
            </summary>
        </member>
        <member name="M:SwiftCollections.Dimensions.Array2D`1.GetIndex(System.Int32,System.Int32)">
            <summary>
            Converts 2D coordinates to a flattened index.
            </summary>
        </member>
        <member name="M:SwiftCollections.Dimensions.Array2D`1.ToArray">
            <summary>
            Converts the flattened array back to a 2D array representation.
            </summary>
        </member>
        <member name="M:SwiftCollections.Dimensions.Array2D`1.Clone">
            <summary>
            Clones a 2D array into a new instance of Array2D.
            </summary>
        </member>
        <member name="M:SwiftCollections.Dimensions.Array2D`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through all elements in the 2D array.
            </summary>
            <returns>An enumerator for the 2D array.</returns>
        </member>
        <member name="M:SwiftCollections.Dimensions.Array2D`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through all elements in the 2D array (non-generic).
            </summary>
            <returns>An enumerator for the 2D array.</returns>
        </member>
        <member name="T:SwiftCollections.Dimensions.Array3D`1">
            <summary>
            Represents a generic 3D array with efficient indexing and resizing capabilities.
            Optimized for use in performance-critical applications like game grids.
            </summary>
            <typeparam name="T">The type of elements in the 3D array.</typeparam>
        </member>
        <member name="P:SwiftCollections.Dimensions.Array3D`1.Size">
            <summary>
            Total number of elements in the 3D array.
            </summary>
        </member>
        <member name="M:SwiftCollections.Dimensions.Array3D`1.Initialize(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the 3D array with the specified dimensions.
            </summary>
        </member>
        <member name="M:SwiftCollections.Dimensions.Array3D`1.Resize(System.Int32,System.Int32,System.Int32)">
            <summary>
            Resizes the 3D array to the specified dimensions.
            Retains existing data where possible.
            </summary>
        </member>
        <member name="M:SwiftCollections.Dimensions.Array3D`1.Shift(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Shifts the elements in the array by the specified offsets along each axis.
            </summary>
            <param name="xOffset">The offset to apply along the X-axis.</param>
            <param name="yOffset">The offset to apply along the Y-axis.</param>
            <param name="zOffset">The offset to apply along the Z-axis.</param>
            <param name="wrap">
            Specifies whether to wrap elements that exceed the array's boundaries. 
            If <c>true</c>, values wrap around to the other side of the array.
            If <c>false</c>, values that exceed boundaries are discarded.
            </param>
            <remarks>
            - Wrapping behavior ensures that no data is lost during shifts.
            - Non-wrapping behavior discards elements that move out of bounds.
            </remarks>
        </member>
        <member name="M:SwiftCollections.Dimensions.Array3D`1.Clear">
            <summary>
            Clears all elements in the array.
            </summary>
        </member>
        <member name="M:SwiftCollections.Dimensions.Array3D`1.Fill(`0)">
            <summary>
            Fills the entire array with the specified value.
            </summary>
        </member>
        <member name="M:SwiftCollections.Dimensions.Array3D`1.ValidateIndex(System.Int32,System.Int32,System.Int32)">
            <summary>
            Validates the specified indices.
            Throws an exception if the indices are out of bounds.
            </summary>
        </member>
        <member name="M:SwiftCollections.Dimensions.Array3D`1.IsValidIndex(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if the specified indices are within bounds.
            </summary>
        </member>
        <member name="M:SwiftCollections.Dimensions.Array3D`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through all elements in the 3D array.
            </summary>
            <returns>An enumerator for the 3D array.</returns>
        </member>
        <member name="M:SwiftCollections.Dimensions.Array3D`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through all elements in the 3D array (non-generic).
            </summary>
            <returns>An enumerator for the 3D array.</returns>
        </member>
        <member name="T:SwiftCollections.Dimensions.BoolArray2D">
            <summary>
            Represents a 2D array specifically designed to handle boolean values.
            </summary>
        </member>
        <member name="M:SwiftCollections.Dimensions.BoolArray2D.Toggle(System.Int32,System.Int32)">
            <summary>
            Toggles the value at the specified position in the array.
            </summary>
        </member>
        <member name="M:SwiftCollections.Dimensions.BoolArray2D.SetRegion(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets all values within a rectangular region to the specified value.
            </summary>
        </member>
        <member name="M:SwiftCollections.Dimensions.BoolArray2D.CountTrue">
            <summary>
            Counts the number of true values in the array.
            </summary>
        </member>
        <member name="T:SwiftCollections.Dimensions.ShortArray2D">
            <summary>
            Represents a 2D array specifically designed to handle short integer values.
            </summary>
        </member>
        <member name="M:SwiftCollections.Dimensions.ShortArray2D.Scale(System.Int16)">
            <summary>
            Scales all elements in the array by the specified factor.
            </summary>
        </member>
        <member name="M:SwiftCollections.Dimensions.ShortArray2D.Normalize(System.Int16,System.Int16)">
            <summary>
            Normalizes all elements in the array to a specified range.
            </summary>
        </member>
        <member name="M:SwiftCollections.ISwiftCloneable`1.CloneTo(System.Collections.Generic.ICollection{`0})">
            <summary>
            Clones the entire <see cref="T:SwiftCollections.ISwiftCloneable`1"/> into a new target <see cref="T:System.Collections.Generic.ICollection`1"/>, 
            ensuring that the target list is an exact copy. Clears the target list first 
            to match the structure and state of the source list exactly.
            </summary>
        </member>
        <member name="T:SwiftCollections.Observable.ObservableArray`1">
            <summary>
            Represents an array of observable properties, raising events whenever an element is updated.
            Designed for performance-critical scenarios in Unity game development.
            </summary>
            <typeparam name="TValue">The type of elements in the array.</typeparam>
        </member>
        <member name="E:SwiftCollections.Observable.ObservableArray`1.ElementChanged">
            <summary>
            Raised when any element in the array changes, providing the index and the new value.
            </summary>
        </member>
        <member name="E:SwiftCollections.Observable.ObservableArray`1.PropertyChanged">
            <summary>
            Raised when the array's state changes.
            </summary>
        </member>
        <member name="T:SwiftCollections.Observable.ObservableArray`1.ElementChangedEventArgs`1">
            <summary>
            Provides details about a changed element, including its index and new value.
            </summary>
        </member>
        <member name="P:SwiftCollections.Observable.ObservableArray`1.ElementChangedEventArgs`1.Index">
            <summary>
            The index of the changed element.
            </summary>
        </member>
        <member name="P:SwiftCollections.Observable.ObservableArray`1.ElementChangedEventArgs`1.NewValue">
            <summary>
            The new value of the changed element.
            </summary>
        </member>
        <member name="T:SwiftCollections.Observable.ObservableProperty`1">
            <summary>
            Represents a property of type <typeparamref name="TValue"/> that raises a <see cref="E:SwiftCollections.Observable.ObservableProperty`1.PropertyChanged"/> event when its value changes.
            </summary>
            <typeparam name="TValue">The type of the value being observed.</typeparam>
        </member>
        <member name="E:SwiftCollections.Observable.ObservableProperty`1.PropertyChanged">
            <summary>
            Raised whenever the property's value changes.
            </summary>
        </member>
        <member name="M:SwiftCollections.Observable.ObservableProperty`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SwiftCollections.Observable.ObservableProperty`1"/> class with the default value of <typeparamref name="TValue"/>.
            </summary>
        </member>
        <member name="M:SwiftCollections.Observable.ObservableProperty`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:SwiftCollections.Observable.ObservableProperty`1"/> class with the specified initial value.
            </summary>
            <param name="value">The initial value of the property.</param>
        </member>
        <member name="P:SwiftCollections.Observable.ObservableProperty`1.Value">
            <summary>
            Gets or sets the property's value. Raises the <see cref="E:SwiftCollections.Observable.ObservableProperty`1.PropertyChanged"/> event when the value changes.
            </summary>
        </member>
        <member name="M:SwiftCollections.Observable.ObservableProperty`1.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:SwiftCollections.Observable.ObservableProperty`1.PropertyChanged"/> event with the specified property name.
            </summary>
        </member>
        <member name="T:SwiftCollections.Observable.ObservableSwiftDictionary`2">
            <summary>
            Represents a dictionary that notifies listeners of changes to its items and structure.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="E:SwiftCollections.Observable.ObservableSwiftDictionary`2.PropertyChanged">
            <summary>
            Raised when a property on the dictionary changes.
            </summary>
        </member>
        <member name="E:SwiftCollections.Observable.ObservableSwiftDictionary`2.CollectionChanged">
            <summary>
            Raised when the dictionary's collection is modified.
            </summary>
        </member>
        <member name="P:SwiftCollections.Observable.ObservableSwiftDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            Raises property and collection change notifications.
            </summary>
        </member>
        <member name="M:SwiftCollections.Observable.ObservableSwiftDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the dictionary.
            Raises a collection change notification.
            </summary>
        </member>
        <member name="M:SwiftCollections.Observable.ObservableSwiftDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the dictionary.
            Raises a collection change notification if the key existed.
            </summary>
        </member>
        <member name="M:SwiftCollections.Observable.ObservableSwiftDictionary`2.Clear">
            <summary>
            Clears all elements from the dictionary.
            Raises a reset collection change notification.
            </summary>
        </member>
        <member name="M:SwiftCollections.Observable.ObservableSwiftDictionary`2.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:SwiftCollections.Observable.ObservableSwiftDictionary`2.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">The name of the property that changed.</param>
        </member>
        <member name="M:SwiftCollections.Observable.ObservableSwiftDictionary`2.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:SwiftCollections.Observable.ObservableSwiftDictionary`2.CollectionChanged"/> event for the specified action and items.
            </summary>
        </member>
        <member name="T:SwiftCollections.Observable.ObservableSwiftList`1">
            <summary>
            Represents an observable extension of the high-performance <see cref="T:SwiftCollections.SwiftList`1"/>.
            Notifies listeners of changes to its items and structure for reactive programming scenarios.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="E:SwiftCollections.Observable.ObservableSwiftList`1.PropertyChanged">
            <summary>
            Raised when a property on the list changes.
            </summary>
        </member>
        <member name="E:SwiftCollections.Observable.ObservableSwiftList`1.CollectionChanged">
            <summary>
            Raised when the list's collection is modified.
            </summary>
        </member>
        <member name="M:SwiftCollections.Observable.ObservableSwiftList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SwiftCollections.Observable.ObservableSwiftList`1"/> class.
            </summary>
        </member>
        <member name="M:SwiftCollections.Observable.ObservableSwiftList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SwiftCollections.Observable.ObservableSwiftList`1"/> class with the specified initial capacity.
            </summary>
        </member>
        <member name="M:SwiftCollections.Observable.ObservableSwiftList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SwiftCollections.Observable.ObservableSwiftList`1"/> class that contains elements copied from the specified collection.
            </summary>
        </member>
        <member name="M:SwiftCollections.Observable.ObservableSwiftList`1.Add(`0)">
            <summary>
            Adds an element to the end of the list.
            Raises collection and property change notifications.
            </summary>
        </member>
        <member name="M:SwiftCollections.Observable.ObservableSwiftList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the list.
            Raises collection and property change notifications.
            </summary>
        </member>
        <member name="M:SwiftCollections.Observable.ObservableSwiftList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index.
            Raises collection and property change notifications.
            </summary>
        </member>
        <member name="M:SwiftCollections.Observable.ObservableSwiftList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the list at the specified index.
            Raises collection and property change notifications.
            </summary>
        </member>
        <member name="M:SwiftCollections.Observable.ObservableSwiftList`1.Clear">
            <summary>
            Clears all elements from the list.
            Raises a reset collection change notification.
            </summary>
        </member>
        <member name="P:SwiftCollections.Observable.ObservableSwiftList`1.Item(System.Int32)">
            <summary>
            Sets or gets the element at the specified index.
            Raises collection change notifications on modification.
            </summary>
        </member>
        <member name="M:SwiftCollections.Observable.ObservableSwiftList`1.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:SwiftCollections.Observable.ObservableSwiftList`1.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">The name of the property that changed.</param>
        </member>
        <member name="M:SwiftCollections.Observable.ObservableSwiftList`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:SwiftCollections.Observable.ObservableSwiftList`1.CollectionChanged"/> event for the specified action and items.
            </summary>
        </member>
        <member name="T:SwiftCollections.Pool.SwiftArrayPool`1">
            <summary>
            A thread-safe pool designed to manage arrays of a specific size. 
            The pool optimizes memory usage by reusing arrays, reducing allocations and improving performance.
            </summary>
            <typeparam name="T">The type of elements in the arrays being pooled. Must have a parameterless constructor.</typeparam>
        </member>
        <member name="F:SwiftCollections.Pool.SwiftArrayPool`1._instance">
            <summary>
            A lazily initialized singleton instance of the array pool.
            </summary>
        </member>
        <member name="P:SwiftCollections.Pool.SwiftArrayPool`1.Shared">
            <summary>
            Gets the shared instance of the pool.
            </summary>
        </member>
        <member name="F:SwiftCollections.Pool.SwiftArrayPool`1._sizePools">
            <summary>
            A collection of object pools, keyed by the size of the arrays they manage.
            </summary>
        </member>
        <member name="F:SwiftCollections.Pool.SwiftArrayPool`1._disposed">
            <summary>
            Tracks whether the pool has been disposed.
            </summary>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftArrayPool`1.#ctor(System.Func{System.Int32,`0[]},System.Action{`0[]},System.Action{`0[]},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SwiftCollections.Pool.SwiftArrayPool`1"/> class with customizable behavior.
            </summary>
            <param name="createFunc">A function used to create new arrays (default: creates arrays of the specified size).</param>
            <param name="actionOnRelease">An action performed when an array is released back to the pool (default: clears the array).</param>
            <param name="actionOnDestroy">An action performed when an array is removed from the pool (default: no action).</param>
            <param name="poolMaxCapacity">The maximum number of arrays each pool can hold for a specific size (default: 100).</param>
        </member>
        <member name="P:SwiftCollections.Pool.SwiftArrayPool`1.CreateFunc">
            <summary>
            Gets the function used to create new arrays.
            </summary>
        </member>
        <member name="P:SwiftCollections.Pool.SwiftArrayPool`1.ActionOnRelease">
            <summary>
            Gets the action performed when an array is released back to the pool.
            </summary>
        </member>
        <member name="P:SwiftCollections.Pool.SwiftArrayPool`1.ActionOnDestroy">
            <summary>
            Gets the action performed when an array is removed from the pool.
            </summary>
        </member>
        <member name="P:SwiftCollections.Pool.SwiftArrayPool`1.PoolMaxCapacity">
            <summary>
            Gets the maximum number of arrays each pool can hold for a specific size.
            </summary>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftArrayPool`1.Rent(System.Int32)">
            <summary>
            Rents an array of the specified size from the pool. If no pool exists for the size, a new one is created.
            </summary>
            <param name="size">The desired size of the array.</param>
            <returns>An array of the specified size, either newly created or retrieved from the pool.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the specified size is less than or equal to 0.</exception>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftArrayPool`1.Release(`0[])">
            <summary>
            Releases an array back to the pool for reuse. If no pool exists for the array's size, it is cleared and discarded.
            </summary>
            <param name="array">The array to release back to the pool.</param>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftArrayPool`1.Clear">
            <summary>
            Clears all object pools, releasing any pooled arrays and resetting the state.
            </summary>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftArrayPool`1.CreatePoolForSize(System.Int32)">
            <summary>
            Creates a new object pool for managing arrays of the specified size.
            </summary>
            <param name="size">The size of arrays to be managed by the pool.</param>
            <returns>A new instance of <see cref="T:SwiftCollections.Pool.SwiftObjectPool`1"/> for managing arrays of the specified size.</returns>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftArrayPool`1.Dispose">
            <summary>
            Releases all resources used by the SwiftArrayPool.
            It is important to call Dispose() to release pooled arrays, preventing potential memory leaks.
            </summary>
        </member>
        <member name="T:SwiftCollections.Pool.SwiftCollectionPool`2">
            <summary>
            A generic pool for managing collections such as <see cref="T:System.Collections.Generic.List`1"/>, <see cref="T:System.Collections.Generic.HashSet`1"/>, 
            <see cref="T:System.Collections.Generic.Dictionary`2"/>, and other types implementing <see cref="T:System.Collections.Generic.ICollection`1"/>.
            Provides efficient reuse of collection instances to reduce memory allocations.
            </summary>
            <typeparam name="TCollection">The type of the collection being pooled. Must implement <see cref="T:System.Collections.Generic.ICollection`1"/> and have a parameterless constructor.</typeparam>
            <typeparam name="TItem">The type of items contained in the collection.</typeparam>
        </member>
        <member name="F:SwiftCollections.Pool.SwiftCollectionPool`2._lazyCollectionPool">
            <summary>
            Internal object pool for managing the lifecycle of pooled collections.
            Uses <see cref="T:System.Lazy`1"/> to ensure lazy initialization.
            </summary>
        </member>
        <member name="P:SwiftCollections.Pool.SwiftCollectionPool`2.CollectionPool">
            <summary>
            Gets the shared instance of the pool.
            </summary>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftCollectionPool`2.Rent">
            <summary>
            Rents a collection from the pool. If the pool is empty, a new collection is created.
            </summary>
            <returns>A collection instance of type <typeparamref name="TCollection"/>.</returns>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftCollectionPool`2.Get(`0@)">
            <summary>
            Rents a collection from the pool and wraps it in a <see cref="T:SwiftCollections.Pool.SwiftPooledObject`1"/> for automatic release.
            </summary>
            <param name="value">The rented collection.</param>
            <returns>A <see cref="T:SwiftCollections.Pool.SwiftPooledObject`1"/> instance wrapping the rented collection.</returns>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftCollectionPool`2.Release(`0)">
            <summary>
            Releases a collection back to the pool for reuse.
            </summary>
            <param name="toRelease">The collection to release.</param>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftCollectionPool`2.Clear">
            <summary>
            Clears all collections from the pool.
            </summary>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftCollectionPool`2.Flush">
            <summary>
            Releases all resources used by the SwiftCollectionPool.
            </summary>
        </member>
        <member name="T:SwiftCollections.Pool.SwiftDictionaryPool`2">
            <summary>
            A specialized pool for managing <see cref="T:SwiftCollections.SwiftDictionary`2"/> instances, 
            providing efficient reuse to minimize memory allocations and improve performance.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="F:SwiftCollections.Pool.SwiftDictionaryPool`2._lazyInstance">
            <summary>
            Shared instance of the dictionary pool, providing a globally accessible pool.
            Uses <see cref="T:LazyDisposable`1"/> to ensure lazy initialization and proper disposal.
            </summary>
        </member>
        <member name="P:SwiftCollections.Pool.SwiftDictionaryPool`2.Shared">
            <summary>
            Gets the shared instance of the pool.
            </summary>
        </member>
        <member name="F:SwiftCollections.Pool.SwiftDictionaryPool`2._disposed">
            <summary>
            Tracks whether the pool has been disposed.
            </summary>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftDictionaryPool`2.Rent">
            <summary>
            Rents a dictionary instance from the pool. If the pool is empty, a new dictionary is created.
            </summary>
            <returns>A <see cref="T:SwiftCollections.SwiftDictionary`2"/> instance.</returns>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftDictionaryPool`2.Release(SwiftCollections.SwiftDictionary{`0,`1})">
            <summary>
            Releases a dictionary instance back to the pool for reuse.
            </summary>
            <param name="dictionary">The dictionary to release.</param>
            <remarks>
            The dictionary will be cleared before being returned to the pool to remove any existing data.
            </remarks>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftDictionaryPool`2.Clear">
            <summary>
            Clears all pooled dictionaries from the pool.
            </summary>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftDictionaryPool`2.Dispose">
            <summary>
            Releases all resources used by the SwiftDictionaryPool.
            It is important to call Dispose() to release pooled objects, preventing potential memory leaks.
            </summary>
        </member>
        <member name="T:SwiftCollections.Pool.SwiftHashSetPool`1">
            <summary>
            A specialized pool for managing <see cref="T:SwiftCollections.SwiftHashSet`1"/> instances, 
            providing efficient reuse to minimize memory allocations and improve performance.
            </summary>
            <typeparam name="T">The type of elements in the hash set.</typeparam>
        </member>
        <member name="F:SwiftCollections.Pool.SwiftHashSetPool`1._lazyInstance">
            <summary>
            Shared instance of the hash set pool, providing a globally accessible pool.
            Uses <see cref="T:LazyDisposable`1"/> to ensure lazy initialization and proper disposal.
            </summary>
        </member>
        <member name="P:SwiftCollections.Pool.SwiftHashSetPool`1.Shared">
            <summary>
            Gets the shared instance of the pool.
            </summary>
        </member>
        <member name="F:SwiftCollections.Pool.SwiftHashSetPool`1._disposed">
            <summary>
            Tracks whether the pool has been disposed.
            </summary>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftHashSetPool`1.Rent">
            <summary>
            Rents a hash set instance from the pool. If the pool is empty, a new hash set is created.
            </summary>
            <returns>A <see cref="T:SwiftCollections.SwiftHashSet`1"/> instance.</returns>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftHashSetPool`1.Release(SwiftCollections.SwiftHashSet{`0})">
            <summary>
            Releases a hash set instance back to the pool for reuse.
            </summary>
            <param name="set">The hash set to release.</param>
            <remarks>
            The hash set will be cleared before being returned to the pool to ensure it contains no stale data.
            </remarks>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftHashSetPool`1.Clear">
            <summary>
            Clears all pooled hash sets from the pool.
            </summary>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftHashSetPool`1.Dispose">
            <summary>
            Releases all resources used by the SwiftHashSetPool.
            It is important to call Dispose() to release pooled objects, preventing potential memory leaks.
            </summary>
        </member>
        <member name="T:SwiftCollections.Pool.SwiftListPool`1">
            <summary>
            A specialized pool for managing <see cref="T:SwiftCollections.SwiftList`1"/> instances,
            providing efficient reuse to minimize memory allocations and improve performance.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="F:SwiftCollections.Pool.SwiftListPool`1._lazyInstance">
            <summary>
            Shared instance of the hash set pool, providing a globally accessible pool.
            Uses <see cref="T:LazyDisposable`1"/> to ensure lazy initialization and proper disposal.
            </summary>
        </member>
        <member name="P:SwiftCollections.Pool.SwiftListPool`1.Shared">
            <summary>
            Gets the shared instance of the pool.
            </summary>
        </member>
        <member name="F:SwiftCollections.Pool.SwiftListPool`1._disposed">
            <summary>
            Tracks whether the pool has been disposed.
            </summary>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftListPool`1.Rent">
            <summary>
            Rents a list instance from the pool. If the pool is empty, a new list is created.
            </summary>
            <returns>A <see cref="T:SwiftCollections.SwiftList`1"/> instance.</returns>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftListPool`1.Release(SwiftCollections.SwiftList{`0})">
            <summary>
            Releases a list instance back to the pool for reuse.
            </summary>
            <param name="list">The list to release.</param>
            <remarks>
            The list will be cleared before being returned to the pool to ensure it contains no stale data.
            </remarks>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftListPool`1.Clear">
            <summary>
            Clears all pooled lists from the pool.
            </summary>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftListPool`1.Dispose">
            <summary>
            Releases all resources used by the SwiftListPool.
            It is important to call Dispose() to release pooled objects, preventing potential memory leaks.
            </summary>
        </member>
        <member name="T:SwiftCollections.Pool.SwiftObjectPool`1">
            <summary>
            A generic object pooling class designed to efficiently reuse objects, reducing memory allocation overhead
            and improving performance. Provides thread-safe operations for creating, renting, and releasing objects.
            </summary>
            <typeparam name="T">The type of object to pool. Must be a reference type.</typeparam>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftObjectPool`1.#ctor(System.Func{`0},System.Action{`0},System.Action{`0},System.Action{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SwiftCollections.Pool.SwiftObjectPool`1"/> class.
            </summary>
            <param name="createFunc">A function used to create new instances of the object type.</param>
            <param name="actionOnGet">An optional action to perform when an object is rented from the pool.</param>
            <param name="actionOnRelease">An optional action to perform when an object is returned to the pool.</param>
            <param name="actionOnDestroy">An optional action to perform when an object is destroyed due to pool size constraints.</param>
            <param name="maxSize">The maximum number of objects the pool can hold.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="createFunc"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="maxSize"/> is less than or equal to 0.</exception>
        </member>
        <member name="P:SwiftCollections.Pool.SwiftObjectPool`1.CountAll">
            <summary>
            Gets the total number of objects created by the pool, including both active and inactive objects.
            </summary>
        </member>
        <member name="P:SwiftCollections.Pool.SwiftObjectPool`1.CountActive">
            <summary>
            Gets the number of objects currently in use (rented from the pool).
            </summary>
        </member>
        <member name="P:SwiftCollections.Pool.SwiftObjectPool`1.CountInactive">
            <summary>
            Gets the number of objects currently available in the pool for rent.
            </summary>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftObjectPool`1.Rent">
            <summary>
            Rents an object from the pool. If the pool is empty, a new object is created using the factory function.
            </summary>
            <returns>An instance of <typeparamref name="T"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if object creation fails.</exception>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftObjectPool`1.Rent(`0@)">
            <summary>
            Rents an object from the pool and wraps it in a <see cref="T:SwiftCollections.Pool.SwiftPooledObject`1"/> for automatic release.
            </summary>
            <param name="value">The rented object.</param>
            <returns>A <see cref="T:SwiftCollections.Pool.SwiftPooledObject`1"/> instance wrapping the rented object.</returns>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftObjectPool`1.Release(`0)">
            <summary>
            Releases an object back to the pool for reuse. If the pool has reached its maximum size, the object
            is destroyed using the configured destroy action.
            </summary>
            <param name="element">The object to release.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="element"/> is null.</exception>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftObjectPool`1.Release(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Releases all objects back to the pool for reuse.  If the pool has reached its maximum size, objects
            are destroyed using the configured destroy action.
            </summary>
            <param name="elements"></param>
            <exception cref="T:System.ArgumentNullException">Thrown if any object in <paramref name="elements"/> is null.</exception>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftObjectPool`1.Clear">
            <summary>
            Clears all objects from the pool, destroying any active objects if a destroy action is configured.
            </summary>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftObjectPool`1.Dispose">
            <summary>
            Releases all resources used by the SwiftObjectPool.
            It is important to call Dispose() to release pooled arrays, preventing potential memory leaks.
            </summary>
        </member>
        <member name="T:SwiftCollections.Pool.SwiftPooledObject`1">
            <summary>
            A struct that wraps an object rented from an <see cref="T:SwiftCollections.Pool.ISwiftObjectPool`1"/> and ensures it is automatically
            released back to the pool when disposed. Designed to simplify resource management and avoid manual release errors.
            </summary>
            <typeparam name="T">The type of the object being pooled. Must be a reference type.</typeparam>
        </member>
        <member name="F:SwiftCollections.Pool.SwiftPooledObject`1._value">
            <summary>
            The rented object that will be returned to the pool upon disposal.
            </summary>
        </member>
        <member name="F:SwiftCollections.Pool.SwiftPooledObject`1._pool">
            <summary>
            The pool from which the object was rented.
            </summary>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftPooledObject`1.#ctor(`0,SwiftCollections.Pool.ISwiftObjectPool{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SwiftCollections.Pool.SwiftPooledObject`1"/> struct.
            </summary>
            <param name="value">The rented object.</param>
            <param name="pool">The pool that owns the object.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> or <paramref name="pool"/> is null.</exception>
        </member>
        <member name="M:SwiftCollections.Pool.SwiftPooledObject`1.Dispose">
            <summary>
            Releases the rented object back to its pool.
            </summary>
            <remarks>
            This method is automatically called when the <see cref="T:SwiftCollections.Pool.SwiftPooledObject`1"/> goes out of scope in a
            using block or when manually disposed.
            </remarks>
        </member>
        <member name="T:SwiftCollections.Query.BoundVolume">
            <summary>
            Represents an axis-aligned bounding box (AABB) in 3D space.
            </summary>
        </member>
        <member name="F:SwiftCollections.Query.BoundVolume._min">
            <summary>
            The minimum point of the bounding volume.
            </summary>
        </member>
        <member name="F:SwiftCollections.Query.BoundVolume._max">
            <summary>
            The maximum point of the bounding volume.
            </summary>
        </member>
        <member name="F:SwiftCollections.Query.BoundVolume._center">
            <summary>
            The center of the bounding volume as the midpoint of the minimum and maximum points.
            </summary>
        </member>
        <member name="F:SwiftCollections.Query.BoundVolume._size">
            <summary>
            The size of the bounding volume as the difference between the maximum and minimum points.
            </summary>
        </member>
        <member name="F:SwiftCollections.Query.BoundVolume._volume">
            <summary>
            The volume of the bounding box, calculated as the product of its dimensions.
            </summary>
        </member>
        <member name="F:SwiftCollections.Query.BoundVolume._isDirty">
            <summary>
            Marks the bounding volume as dirty, indicating its properties need recalculation.
            </summary>
        </member>
        <member name="P:SwiftCollections.Query.BoundVolume.Min">
            <inheritdoc cref="F:SwiftCollections.Query.BoundVolume._min"/>
        </member>
        <member name="P:SwiftCollections.Query.BoundVolume.Max">
            <inheritdoc cref="F:SwiftCollections.Query.BoundVolume._max"/>
        </member>
        <member name="P:SwiftCollections.Query.BoundVolume.Center">
            <inheritdoc cref="F:SwiftCollections.Query.BoundVolume._center"/>
        </member>
        <member name="P:SwiftCollections.Query.BoundVolume.Size">
            <inheritdoc cref="F:SwiftCollections.Query.BoundVolume._size"/>
        </member>
        <member name="P:SwiftCollections.Query.BoundVolume.Volume">
            <inheritdoc cref="F:SwiftCollections.Query.BoundVolume._volume"/>
        </member>
        <member name="M:SwiftCollections.Query.BoundVolume.RecalculateMeta">
            <summary>
            Forces recalculation of the bounding volume's metadata, such as center, size, and volume.
            </summary>
        </member>
        <member name="M:SwiftCollections.Query.BoundVolume.Union(SwiftCollections.Query.BoundVolume)">
            <inheritdoc cref="M:SwiftCollections.Query.BoundVolume.Union(SwiftCollections.Query.IBoundVolume)"/>
        </member>
        <member name="T:SwiftCollections.Query.FixedBoundVolume">
            <summary>
            Represents an axis-aligned bounding box (AABB) in 3D space using Fixed-Point Math.
            </summary>
        </member>
        <member name="F:SwiftCollections.Query.FixedBoundVolume._min">
            <summary>
            The minimum point of the bounding volume.
            </summary>
        </member>
        <member name="F:SwiftCollections.Query.FixedBoundVolume._max">
            <summary>
            The maximum point of the bounding volume.
            </summary>
        </member>
        <member name="F:SwiftCollections.Query.FixedBoundVolume._center">
            <summary>
            The center of the bounding volume as the midpoint of the minimum and maximum points.
            </summary>
        </member>
        <member name="F:SwiftCollections.Query.FixedBoundVolume._size">
            <summary>
            The size of the bounding volume as the difference between the maximum and minimum points.
            </summary>
        </member>
        <member name="F:SwiftCollections.Query.FixedBoundVolume._volume">
            <summary>
            The volume of the bounding box, calculated as the product of its dimensions.
            </summary>
        </member>
        <member name="F:SwiftCollections.Query.FixedBoundVolume._isDirty">
            <summary>
            Marks the bounding volume as dirty, indicating its properties need recalculation.
            </summary>
        </member>
        <member name="P:SwiftCollections.Query.FixedBoundVolume.Min">
            <inheritdoc cref="F:SwiftCollections.Query.FixedBoundVolume._min"/>
        </member>
        <member name="P:SwiftCollections.Query.FixedBoundVolume.Max">
            <inheritdoc cref="F:SwiftCollections.Query.FixedBoundVolume._max"/>
        </member>
        <member name="P:SwiftCollections.Query.FixedBoundVolume.Center">
            <inheritdoc cref="F:SwiftCollections.Query.FixedBoundVolume._center"/>
        </member>
        <member name="P:SwiftCollections.Query.FixedBoundVolume.Size">
            <inheritdoc cref="F:SwiftCollections.Query.FixedBoundVolume._size"/>
        </member>
        <member name="P:SwiftCollections.Query.FixedBoundVolume.Volume">
            <inheritdoc cref="F:SwiftCollections.Query.FixedBoundVolume._volume"/>
        </member>
        <member name="M:SwiftCollections.Query.FixedBoundVolume.RecalculateMeta">
            <summary>
            Forces recalculation of the bounding volume's metadata, such as center, size, and volume.
            </summary>
        </member>
        <member name="M:SwiftCollections.Query.FixedBoundVolume.Union(SwiftCollections.Query.FixedBoundVolume)">
            <inheritdoc cref="M:SwiftCollections.Query.FixedBoundVolume.Union(SwiftCollections.Query.IBoundVolume)"/>
        </member>
        <member name="T:SwiftCollections.Query.IBoundVolume">
            <summary>
            Represents a generic interface for a bounding volume, supporting spatial queries and operations.
            </summary>
        </member>
        <member name="M:SwiftCollections.Query.IBoundVolume.Union(SwiftCollections.Query.IBoundVolume)">
            <summary>
            Combines the current bounding volume with another, creating a new volume that encloses both.
            </summary>
            <param name="other">The other bounding volume to combine with.</param>
            <returns>A new bounding volume that contains both the current and other volumes.</returns>
        </member>
        <member name="M:SwiftCollections.Query.IBoundVolume.Intersects(SwiftCollections.Query.IBoundVolume)">
            <summary>
            Determines whether the current bounding volume intersects with another.
            </summary>
            <param name="other">The other bounding volume to test for intersection.</param>
            <returns>True if the volumes intersect; otherwise, false.</returns>
        </member>
        <member name="M:SwiftCollections.Query.IBoundVolume.GetCost(SwiftCollections.Query.IBoundVolume)">
            <summary>
            Calculates the cost of combining the current bounding volume with another.
            </summary>
            <param name="other">The other bounding volume to consider.</param>
            <returns>The cost metric of the union operation.</returns>
        </member>
        <member name="T:SwiftCollections.Query.SwiftBVH`1">
            <summary>
            Represents a Bounding Volume Hierarchy (BVH) optimized for spatial queries.
            </summary>
        </member>
        <member name="M:SwiftCollections.Query.SwiftBVH`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SwiftCollections.Query.SwiftBVH`1"/> class with the specified capacity.
            </summary>
        </member>
        <member name="P:SwiftCollections.Query.SwiftBVH`1.NodePool">
            <summary>
            Gets the underlying pool of nodes used in the BVH.
            </summary>
        </member>
        <member name="P:SwiftCollections.Query.SwiftBVH`1.RootNode">
            <summary>
            Gets the root node of the BVH.
            </summary>
        </member>
        <member name="P:SwiftCollections.Query.SwiftBVH`1.RootNodeIndex">
            <summary>
            Gets the index of the root node in the BVH.
            </summary>
        </member>
        <member name="P:SwiftCollections.Query.SwiftBVH`1.Count">
            <summary>
            Gets the total number of leaf nodes in the BVH.
            </summary>
        </member>
        <member name="M:SwiftCollections.Query.SwiftBVH`1.AllocateNode(`0,SwiftCollections.Query.IBoundVolume,System.Boolean)">
            <summary>
            Allocates a new node with the specified value, bounds, and leaf status.
            Reuses indices from the freelist when available.
            </summary>
        </member>
        <member name="M:SwiftCollections.Query.SwiftBVH`1.Insert(`0,SwiftCollections.Query.IBoundVolume)">
            <summary>
            Inserts a bounding volume with an associated value into the BVH.
            Ensures tree balance and updates hash buckets.
            </summary>
        </member>
        <member name="M:SwiftCollections.Query.SwiftBVH`1.InsertIntoTree(System.Int32,System.Int32)">
            <summary>
            Inserts a node into the tree while maintaining tree balance.
            Adjusts parent-child relationships as necessary.
            </summary>
        </member>
        <member name="M:SwiftCollections.Query.SwiftBVH`1.InsertIntoBuckets(`0,System.Int32)">
            <summary>
            Inserts a value into the hash bucket for fast lookup.
            Handles collisions with linear probing.
            </summary>
        </member>
        <member name="M:SwiftCollections.Query.SwiftBVH`1.UpdateEntryBounds(`0,SwiftCollections.Query.IBoundVolume)">
            <summary>
            Updates the bounding volume of a node and propagates changes up the tree.
            Ensures consistency in parent bounds and subtree sizes.
            </summary>
        </member>
        <member name="M:SwiftCollections.Query.SwiftBVH`1.Remove(`0)">
            <summary>
            Removes a value and its associated bounding volume from the BVH.
            Updates tree structure and clears hash bucket entries.
            </summary>
        </member>
        <member name="M:SwiftCollections.Query.SwiftBVH`1.RemoveFromBuckets(`0)">
            <summary>
            Removes an entry from the hash buckets, resolving collisions as necessary.
            Throws an exception if the value is not found.
            </summary>
        </member>
        <member name="M:SwiftCollections.Query.SwiftBVH`1.RemoveFromTree(System.Int32)">
            <summary>
            Recursively removes a node and updates the bounds and subtree sizes of parents.
            Ensures integrity of the BVH structure.
            </summary>
        </member>
        <member name="M:SwiftCollections.Query.SwiftBVH`1.EnsureCapacity(System.Int32)">
            <summary>
            Ensures the BVH has sufficient capacity, resizing the node pool and buckets if needed.
            </summary>
        </member>
        <member name="M:SwiftCollections.Query.SwiftBVH`1.Resize(System.Int32)">
            <summary>
            Resizes the internal node pool to accommodate additional nodes.
            Preserves existing nodes and reinitializes the expanded capacity.
            </summary>
        </member>
        <member name="M:SwiftCollections.Query.SwiftBVH`1.ResizeBuckets(System.Int32)">
            <summary>
            Resizes and rehashes the hash buckets to maintain lookup efficiency.
            Rehashes existing nodes after resizing.
            </summary>
        </member>
        <member name="M:SwiftCollections.Query.SwiftBVH`1.GetCombinedBounds(SwiftCollections.Query.SwiftBVHNode{`0},SwiftCollections.Query.SwiftBVHNode{`0})">
            <summary>
            Gets the combined bounding volume of two child nodes.
            Handles cases where one or both children are missing.
            </summary>
        </member>
        <member name="M:SwiftCollections.Query.SwiftBVH`1.Query(SwiftCollections.Query.IBoundVolume,System.Collections.Generic.ICollection{`0})">
            <summary>
            Queries the BVH for values whose bounding volumes intersect with the specified volume.
            Uses a stack-based approach for efficient traversal.
            </summary>
        </member>
        <member name="M:SwiftCollections.Query.SwiftBVH`1.FindEntry(`0)">
            <summary>
            Finds the index of a node by its value in the BVH using hash buckets.
            Returns -1 if the value is not found.
            </summary>
        </member>
        <member name="M:SwiftCollections.Query.SwiftBVH`1.Clear">
            <summary>
            Clears the BVH, resetting all nodes, buckets, and metadata.
            </summary>
        </member>
        <member name="T:SwiftCollections.Query.SwiftBVHNode`1">
            <summary>
            Represents a node in a Bounding Volume Hierarchy (BVH).
            Stores spatial data and maintains hierarchical relationships.
            </summary>
        </member>
        <member name="P:SwiftCollections.Query.SwiftBVHNode`1.Value">
            <summary>
            Gets or sets the value stored in the node.
            </summary>
        </member>
        <member name="P:SwiftCollections.Query.SwiftBVHNode`1.Bounds">
            <summary>
            Gets or sets the bounding volume of the node.
            </summary>
        </member>
        <member name="P:SwiftCollections.Query.SwiftBVHNode`1.ParentIndex">
            <summary>
            Gets or sets the index of the parent node.
            </summary>
        </member>
        <member name="P:SwiftCollections.Query.SwiftBVHNode`1.HasParent">
            <summary>
            Determines if the node has a parent.
            </summary>
        </member>
        <member name="P:SwiftCollections.Query.SwiftBVHNode`1.LeftChildIndex">
            <summary>
            Gets or sets the index of the left child node.
            </summary>
        </member>
        <member name="P:SwiftCollections.Query.SwiftBVHNode`1.HasLeftChild">
            <summary>
            Determines if the node has a left child.
            </summary>
        </member>
        <member name="P:SwiftCollections.Query.SwiftBVHNode`1.RightChildIndex">
            <summary>
            Gets or sets the index of the right child node.
            </summary>
        </member>
        <member name="P:SwiftCollections.Query.SwiftBVHNode`1.HasRightChild">
            <summary>
            Determines if the node has a right child.
            </summary>
        </member>
        <member name="P:SwiftCollections.Query.SwiftBVHNode`1.HasChildren">
            <summary>
            Determines if the node has any children.
            </summary>
        </member>
        <member name="P:SwiftCollections.Query.SwiftBVHNode`1.IsLeaf">
            <summary>
            Gets or sets a value indicating whether this node is a leaf node.
            </summary>
        </member>
        <member name="P:SwiftCollections.Query.SwiftBVHNode`1.SubtreeSize">
            <summary>
            Tracks the number of nodes in the subtree rooted at this node.
            </summary>
        </member>
        <member name="P:SwiftCollections.Query.SwiftBVHNode`1.IsAllocated">
            <summary>
            Determines whether or not this node has been allocated from the pool or is a pooled instance
            </summary>
        </member>
        <member name="P:SwiftCollections.Query.SwiftBVHNode`1.Default">
            <summary>
            Provides a custom default instance of <see cref="T:SwiftCollections.Query.SwiftBVHNode`1"/>.
            </summary>
        </member>
        <member name="M:SwiftCollections.Query.SwiftBVHNode`1.Reset">
            <summary>
            Resets the node to its default state.
            Clears all references and metadata.
            </summary>
        </member>
        <member name="T:SwiftCollections.SwiftBiDictionary`2">
            <summary>
            Represents a bidirectional dictionary that allows for efficient lookups in both directions,
            mapping keys to values and values back to keys. Both keys and values must be unique to maintain
            the integrity of the bidirectional relationship.
            Inherits from <see cref="T:SwiftCollections.SwiftDictionary`2"/> and maintains a reverse map for reverse lookups.
            </summary>
            <typeparam name="T1">The type of the keys in the forward dictionary.</typeparam>
            <typeparam name="T2">The type of the values in the forward dictionary.</typeparam>
        </member>
        <member name="F:SwiftCollections.SwiftBiDictionary`2._reverseMap">
            <summary>
            The reverse map for bidirectional lookup, mapping from <typeparamref name="T2"/> to <typeparamref name="T1"/>.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftBiDictionary`2._reverseMapSyncRoot">
            <summary>
            An object used to synchronize access to the reverse map during serialization and deserialization.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftBiDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SwiftCollections.SwiftBiDictionary`2"/> class that is empty and uses the default equality comparers for the key and value types.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftBiDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:SwiftCollections.SwiftBiDictionary`2"/> class that is empty and uses the specified equality comparers for the key and value types.
            </summary>
            <param name="comparer1">The comparer to use for the keys.</param>
            <param name="comparer2">The comparer to use for the values.</param>
        </member>
        <member name="M:SwiftCollections.SwiftBiDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:SwiftCollections.SwiftBiDictionary`2"/> class that contains elements copied from the specified dictionary and uses the default equality comparers for the key and value types.
            </summary>
            <param name="dictionary">The dictionary whose elements are copied to the new <see cref="T:SwiftCollections.SwiftBiDictionary`2"/>.</param>
        </member>
        <member name="M:SwiftCollections.SwiftBiDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:SwiftCollections.SwiftBiDictionary`2"/> class that contains elements copied from the specified dictionary and uses the specified equality comparers for the key and value types.
            </summary>
            <param name="dictionary">The dictionary whose elements are copied to the new <see cref="T:SwiftCollections.SwiftBiDictionary`2"/>.</param>
            <param name="comparer1">The comparer to use for the keys.</param>
            <param name="comparer2">The comparer to use for the values.</param>
        </member>
        <member name="M:SwiftCollections.SwiftBiDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor used during deserialization to reconstruct the <see cref="T:SwiftCollections.SwiftBiDictionary`2"/> instance.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> holding the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:SwiftCollections.SwiftBiDictionary`2.Remove(`0,`1)">
            <summary>
            Removes the key-value pair from the <see cref="T:SwiftCollections.SwiftBiDictionary`2"/>.
            Also removes the corresponding value-key pair from the reverse map.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <param name="value">The value of the element to remove.</param>
            <returns><c>true</c> if the element is successfully found and removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SwiftCollections.SwiftBiDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified key and value to the <see cref="T:SwiftCollections.SwiftBiDictionary`2"/>.
            Also adds the value-key pair to the reverse map.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.</param>
            <exception cref="T:System.ArgumentException">An element with the same key or value already exists.</exception>
        </member>
        <member name="M:SwiftCollections.SwiftBiDictionary`2.InsertIfNotExist(`0,`1)">
            <summary>
            Overrides the base class's <see cref="M:SwiftCollections.SwiftDictionary`2.InsertIfNotExist(`0,`1)"/> method to ensure synchronization with the reverse map.
            </summary>
            <param name="key">The key to insert.</param>
            <param name="value">The value to insert.</param>
            <returns><c>true</c> if a new entry was added; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SwiftCollections.SwiftBiDictionary`2.Remove(`0)">
            <summary>
            Removes the value with the specified key from the <see cref="T:SwiftCollections.SwiftBiDictionary`2"/>.
            Also removes the corresponding key from the reverse map.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns><c>true</c> if the element is successfully found and removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SwiftCollections.SwiftBiDictionary`2.Clear">
            <summary>
            Removes all keys and values from the <see cref="T:SwiftCollections.SwiftBiDictionary`2"/>.
            Also clears the reverse map.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftBiDictionary`2.TryGetKey(`1,`0@)">
            <summary>
            Attempts to get the key associated with the specified value.
            </summary>
            <param name="value">The value whose associated key is to be retrieved.</param>
            <param name="key">When this method returns, contains the key associated with the specified value, if the key is found; otherwise, the default value for the type of the key.</param>
            <returns><c>true</c> if the key was found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SwiftCollections.SwiftBiDictionary`2.GetKey(`1)">
            <summary>
            Gets the key associated with the specified value.
            </summary>
            <param name="value">The value whose associated key is to be retrieved.</param>
            <returns>The key associated with the specified value.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="value"/> does not exist in the reverse map.</exception>
        </member>
        <member name="M:SwiftCollections.SwiftBiDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether the <see cref="T:SwiftCollections.SwiftBiDictionary`2"/> contains the specified value.
            </summary>
            <param name="value">The value to locate in the dictionary.</param>
            <returns><c>true</c> if the dictionary contains an element with the specified value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SwiftCollections.SwiftBiDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the <see cref="T:SwiftCollections.SwiftBiDictionary`2"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination and source of the serialized stream.</param>
        </member>
        <member name="M:SwiftCollections.SwiftBiDictionary`2.OnDeserialization(System.Object)">
            <summary>
            Implements the <see cref="M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)"/> method.
            Reconstructs the reverse map after deserialization.
            </summary>
            <param name="sender">The source of the deserialization event.</param>
        </member>
        <member name="T:SwiftCollections.SwiftBucket`1">
             <summary>
             Represents a high-performance bucket collection that allows O(1) addition and removal of items at any arrayIndex.
             Items maintain stable indices unless explicitly removed. Iteration does not guarantee any specific order.
             </summary>
             <remarks>
             <c>SwiftBucket&lt;T&gt;</c> provides significant performance benefits over <c>List&lt;T&gt;</c> in specific scenarios,
             particularly when dealing with frequent modifications at arbitrary positions within the collection.
             By leveraging its O(1) time complexity for both insertion and removal at any arrayIndex,
             it outperforms <c>List&lt;T&gt;</c> where such operations are a bottleneck.
            
             **Efficient Lookups Using Indices**:
             When you add items to the bucket using the <see cref="M:SwiftCollections.SwiftBucket`1.Add(`0)"/> method, it returns an arrayIndex that you can store externally.
             You can then use this arrayIndex to access the item directly via the indexer, and check if it's still present using the <see cref="M:SwiftCollections.SwiftBucket`1.IsAllocated(System.Int32)"/> method.
             This approach allows for O(1) time complexity for lookups and existence checks, avoiding the need for O(n) searches using methods like <see cref="M:SwiftCollections.SwiftBucket`1.IndexOf(`0)"/> or <see cref="M:SwiftCollections.SwiftBucket`1.Contains(`0)"/>.
            
             **Note**: Operations like <see cref="M:SwiftCollections.SwiftBucket`1.Contains(`0)"/> and <see cref="M:SwiftCollections.SwiftBucket`1.IndexOf(`0)"/> have O(n) time complexity due to the underlying data structure.
             Additionally, iteration over the collection does not follow any guaranteed order and depends on internal allocation.
             </remarks>
             <typeparam name="T">Specifies the type of elements in the bucket.</typeparam>
        </member>
        <member name="M:SwiftCollections.SwiftBucket`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SwiftCollections.SwiftBucket`1"/> class.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftBucket`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SwiftCollections.SwiftBucket`1"/> class with the specified capacity.
            </summary>
            <param name="capacity">The initial capacity of the bucket.</param>
        </member>
        <member name="P:SwiftCollections.SwiftBucket`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:SwiftCollections.SwiftBucket`1"/>.
            </summary>
        </member>
        <member name="P:SwiftCollections.SwiftBucket`1.Capacity">
            <summary>
            Gets the total capacity of the <see cref="T:SwiftCollections.SwiftBucket`1"/>.
            </summary>
        </member>
        <member name="P:SwiftCollections.SwiftBucket`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified arrayIndex.
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if the arrayIndex is invalid or unallocated.
            </summary>
            <param name="index">The zero-based arrayIndex of the element to get or set.</param>
        </member>
        <member name="M:SwiftCollections.SwiftBucket`1.Add(`0)">
            <summary>
            Adds an item to the bucket and returns its arrayIndex.
            </summary>
            <param name="item">The item to add.</param>
            <returns>The arrayIndex where the item was added.</returns>
        </member>
        <member name="M:SwiftCollections.SwiftBucket`1.InsertAt(System.Int32,`0)">
            <summary>
            Inserts an item at the specified arrayIndex.
            If an item already exists at that arrayIndex, it will be replaced.
            </summary>
            <param name="index">The arrayIndex at which to insert the item.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:SwiftCollections.SwiftBucket`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the bucket.
            </summary>
            <param name="item">The object to remove.</param>
            <returns><c>true</c> if item was successfully removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SwiftCollections.SwiftBucket`1.TryRemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified arrayIndex if it has been allocated.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftBucket`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified arrayIndex.
            </summary>
            <param name="index">The arrayIndex of the item to remove.</param>
        </member>
        <member name="M:SwiftCollections.SwiftBucket`1.Clear">
            <summary>
            Removes all items from the bucket.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftBucket`1.TrimExcessCapacity">
            <summary>
            Reduces the capacity of the <see cref="T:SwiftCollections.SwiftBucket`1"/> by resizing the internal array to match the current count.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftBucket`1.Contains(`0)">
            <summary>
            Determines whether the bucket contains a specific value.
            </summary>
            <param name="item">The object to locate in the bucket.</param>
            <returns><c>true</c> if item is found; otherwise, <c>false</c>.</returns>
            <remarks>
            This method performs a linear search and has a time complexity of O(n).
            It is recommended to store the indices returned by the <see cref="M:SwiftCollections.SwiftBucket`1.Add(`0)"/> method for faster lookups using the indexer.
            </remarks>
        </member>
        <member name="M:SwiftCollections.SwiftBucket`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based arrayIndex of the first occurrence within the bucket.
            </summary>
            <param name="item">The object to locate in the bucket.</param>
            <returns>
            The zero-based arrayIndex of the first occurrence of <paramref name="item"/> within the bucket, if found; otherwise, <c>-1</c>.
            </returns>
            <remarks>
            This method performs a linear search and has a time complexity of O(n).
            It is recommended to store the indices returned by the <see cref="M:SwiftCollections.SwiftBucket`1.Add(`0)"/> method for faster lookups using the indexer.
            </remarks>
        </member>
        <member name="M:SwiftCollections.SwiftBucket`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the bucket to an <see cref="T:System.Array"/>, starting at a particular Array arrayIndex.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from bucket.</param>
            <param name="arrayIndex">The zero-based arrayIndex in array at which copying begins.</param>
        </member>
        <member name="M:SwiftCollections.SwiftBucket`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:SwiftCollections.SwiftBucket`1"/>.
            </summary>
            <returns>An enumerator for the bucket.</returns>
        </member>
        <member name="T:SwiftCollections.SwiftDictionary`2">
            <summary>
            A high-performance, memory-efficient dictionary providing lightning-fast O(1) operations for addition, retrieval, and removal, optimized to outperform standard dictionaries.
            </summary>
            <typeparam name="TKey">Specifies the type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">Specifies the type of values in the dictionary.</typeparam>
        </member>
        <member name="F:SwiftCollections.SwiftDictionary`2.DefaultCapacity">
            <summary>
            The default initial capacity of the dictionary.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftDictionary`2._LoadFactorThreshold">
            <summary>
            Determines the maximum allowable load factor before resizing the hash set to maintain performance.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftDictionary`2._entries">
            <summary>
            The array containing the entries of the dictionary.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftDictionary`2._count">
            <summary>
            The total number of entries in the dictionary
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftDictionary`2._entryMask">
            <summary>
            A mask used for efficiently computing the entry arrayIndex from a hash code.
            This is typically the size of the entry array minus one, assuming the size is a power of two.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftDictionary`2._comparer">
            <summary>
            The comparer used to determine equality of keys and to generate hash codes.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftDictionary`2._adaptiveResizeFactor">
            <summary>
            Specifies the dynamic growth factor for resizing, adjusted based on recent usage patterns.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftDictionary`2._nextResizeCount">
            <summary>
            Tracks the count threshold at which the hash set should resize based on the load factor.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftDictionary`2._movingFillRate">
            <summary>
            Represents the moving average of the fill rate, used to dynamically adjust resizing behavior.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftDictionary`2._syncRoot">
            <summary>
            An object that can be used to synchronize access to the SwiftDictionary.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftDictionary`2._version">
            <summary>
            A version counter used to track modifications to the dictionary.
            Incremented on mutations to detect changes during enumeration and ensure enumerator validity.
            </summary>
        </member>
        <member name="T:SwiftCollections.SwiftDictionary`2.Entry">
            <summary>
            Represents a single key-value pair in the dictionary, including its hash code for quick access.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftDictionary`2.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:SwiftCollections.SwiftDictionary`2"/> with customizable capacity and comparer for optimal performance tailored to your needs.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc cref="M:SwiftCollections.SwiftDictionary`2.#ctor"/>
        </member>
        <member name="M:SwiftCollections.SwiftDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc cref="M:SwiftCollections.SwiftDictionary`2.#ctor"/>
        </member>
        <member name="M:SwiftCollections.SwiftDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc cref="M:SwiftCollections.SwiftDictionary`2.#ctor"/>
        </member>
        <member name="M:SwiftCollections.SwiftDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the SwiftDictionary class with serialized data.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:SwiftCollections.SwiftDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the dictionary.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftDictionary`2._keyCollection">
            <summary>
            The collection containing the keys of the dictionary.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftDictionary`2._valueCollection">
            <summary>
            The collection containing the values of the dictionary.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftDictionary`2.Add(`0,`1)">
            <summary>
            Attempts to add the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.</param>
            <returns>
            true if the key/value pair was added to the dictionary successfully; 
            false if the key already exists.
            </returns>
        </member>
        <member name="M:SwiftCollections.SwiftDictionary`2.InsertIfNotExist(`0,`1)">
            <summary>
            Inserts a key/value pair into the dictionary. If the key already exists and 
            pair is added, or the method returns false if the key already exists.
            </summary>
            <param name="key">The key to insert or update.</param>
            <param name="value">The value to insert or update.</param>
            <returns>
            true if the key/value pair was added to the dictionary successfully; 
            false if the key already exists.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the key is null.</exception>
        </member>
        <member name="M:SwiftCollections.SwiftDictionary`2.CheckLoadThreshold">
            <summary>
            Ensures that the dictionary is resized when the current load factor exceeds the predefined threshold.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftDictionary`2.EnsureCapacity(System.Int32)">
            <summary>
            Ensures that the dictionary can hold up to the specified number of entries, if not it resizes.
            </summary>
            <param name="capacity">The minimum capacity to ensure.</param>
            <returns>The new capacity of the dictionary.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The capacity is less than zero.</exception>
        </member>
        <member name="M:SwiftCollections.SwiftDictionary`2.Resize(System.Int32)">
            <summary>
            Resizes the internal arrays to the specified new size.
            </summary>
            <param name="newSize">The new size for the internal arrays.</param>
        </member>
        <member name="M:SwiftCollections.SwiftDictionary`2.TrimExcess">
            <summary>
            Sets the capacity of a <see cref="T:SwiftCollections.SwiftDictionary`2"/> to the actual 
            number of elements it contains, rounded up to a nearby next power of 2 value.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftDictionary`2.CalculateAdaptiveResizeFactors(System.Int32)">
            <summary>
             Updates adaptive resize parameters based on the current fill rate to balance memory usage and performance.
            </summary>
            <param name="newSize"></param>
        </member>
        <member name="M:SwiftCollections.SwiftDictionary`2.Initialize(System.Int32)">
            <summary>
            Initializes the dictionary with the specified capacity.
            </summary>
            <param name="capacity">The initial number of elements that the dictionary can contain.</param>
        </member>
        <member name="M:SwiftCollections.SwiftDictionary`2.SwitchToRandomizedComparer">
            <summary>
            Switches the dictionary's comparer to a randomized comparer to mitigate the effects of high collision counts,
            and rehashes all entries using the new comparer to redistribute them across <see cref="F:SwiftCollections.SwiftDictionary`2._entries"/>.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftDictionary`2.RehashEntries">
            <summary>
            Reconstructs the internal entry structure to align with updated hash codes, ensuring efficient access and storage.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftDictionary`2.FindEntry(`0)">
            <summary>
            Finds the arrayIndex of the entry with the specified key.
            </summary>
            <param name="key">The key to locate in the dictionary.</param>
            <returns>The arrayIndex of the entry if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">The key is null.</exception>
        </member>
        <member name="M:SwiftCollections.SwiftDictionary`2.ThrowIfNullAndNullsAreIllegal(System.Object)">
            <summary>
            Throws an exception if the specified value is null and nulls are not allowed for TValue.
            </summary>
            <param name="value">The value to check.</param>
            <exception cref="T:System.ArgumentNullException">The value is null and TValue is a value type.</exception>
        </member>
        <member name="T:SwiftCollections.SwiftDictionary`2.SwiftDictionaryEnumerator">
            <summary>
            Provides an efficient enumerator for iterating over the key-value pairs in the SwiftDictionary, enabling smooth traversal during enumeration.
            </summary>
        </member>
        <member name="T:SwiftCollections.SwiftDictionary`2.KeyCollection">
            <summary>
            Provides a dynamic, read-only collection of all keys in the dictionary, supporting enumeration and copy operations.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftDictionary`2.KeyCollection.#ctor(SwiftCollections.SwiftDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the KeyCollection class that reflects the keys in the specified dictionary.
            </summary>
            <param name="dictionary">The dictionary whose keys are reflected in the new KeyCollection.</param>
            <exception cref="T:System.ArgumentNullException">The dictionary is null.</exception>
        </member>
        <member name="M:SwiftCollections.SwiftDictionary`2.KeyCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the keys in the collection.
            </summary>
            <returns>An enumerator for the keys in the collection.</returns>
        </member>
        <member name="T:SwiftCollections.SwiftDictionary`2.ValueCollection">
            <summary>
            Offers a dynamic, read-only collection of all values in the dictionary, supporting enumeration and copy operations.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftDictionary`2.ValueCollection.#ctor(SwiftCollections.SwiftDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the ValueCollection class that reflects the values in the specified dictionary.
            </summary>
            <param name="dictionary">The dictionary whose values are reflected in the new ValueCollection.</param>
            <exception cref="T:System.ArgumentNullException">The dictionary is null.</exception>
        </member>
        <member name="M:SwiftCollections.SwiftDictionary`2.ValueCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the values in the collection.
            </summary>
            <returns>An enumerator for the values in the collection.</returns>
        </member>
        <member name="M:SwiftCollections.SwiftDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the System.Runtime.Serialization.ISerializable interface and returns
            the data needed to serialize the SwiftDictionary instance.
            </summary>
            <param name="info">
            A System.Runtime.Serialization.SerializationInfo object that contains the information 
            required to serialize the SwiftDictionary instance.
            </param>
            <param name="context">
            A System.Runtime.Serialization.StreamingContext structure that contains the source
            and destination of the serialized stream associated with the SwiftDictionary
            instance.
            </param>
        </member>
        <member name="M:SwiftCollections.SwiftDictionary`2.OnDeserialization(System.Object)">
            <summary>
            Implements the System.Runtime.Serialization.ISerializable interface and raises the deserialization event when the deserialization is complete.
            </summary>
            <param name="sender">The source of the deserialization event.</param>
        </member>
        <member name="T:SwiftCollections.SwiftHashSet`1">
            <summary>
            Represents a high-performance set of unique values with efficient operations for addition, removal, and lookup
            </summary>
            <typeparam name="T">The type of elements in the set.</typeparam>
        </member>
        <member name="F:SwiftCollections.SwiftHashSet`1.DefaultCapacity">
            <summary>
            The default initial capacity of the set.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftHashSet`1._LoadFactorThreshold">
            <summary>
            Determines the maximum allowable load factor before resizing the hash set to maintain performance.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftHashSet`1._entries">
            <summary>
            The array containing the entries of the SwiftHashSet.
            </summary>
            <remarks>
            Capacity will always be a power of two for efficient pooling cache.
            </remarks>
        </member>
        <member name="F:SwiftCollections.SwiftHashSet`1._count">
            <summary>
            The total number of entries in the hash set
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftHashSet`1._entryMask">
            <summary>
            A mask used for efficiently computing the entry index from a hash code.
            This is typically the size of the entry array minus one, assuming the size is a power of two.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftHashSet`1._comparer">
            <summary>
            The comparer used to determine equality of keys and to generate hash codes.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftHashSet`1._adaptiveResizeFactor">
            <summary>
            Specifies the dynamic growth factor for resizing, adjusted based on recent usage patterns.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftHashSet`1._nextResizeCount">
            <summary>
            Tracks the count threshold at which the hash set should resize based on the load factor.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftHashSet`1._movingFillRate">
            <summary>
            Represents the moving average of the fill rate, used to dynamically adjust resizing behavior.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftHashSet`1._version">
            <summary>
            A version counter used to track modifications to the set.
            Incremented on mutations to detect changes during enumeration and ensure enumerator validity.
            </summary>
        </member>
        <member name="T:SwiftCollections.SwiftHashSet`1.Entry">
            <summary>
            Represents a single value in the set, including its hash code for quick access.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftHashSet`1.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:SwiftCollections.SwiftHashSet`1"/> with customizable capacity and comparer for optimal performance tailored to your needs.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc cref="M:SwiftCollections.SwiftHashSet`1.#ctor"/>
        </member>
        <member name="M:SwiftCollections.SwiftHashSet`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SwiftCollections.SwiftHashSet`1"/> class that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SwiftCollections.SwiftHashSet`1"/> class that contains elements copied from the specified collection.
            </summary>
            <param name="collection">The collection whose elements are copied to the new set.</param>
            <param name="comparer">The comparer to use when comparing elements.</param>
        </member>
        <member name="M:SwiftCollections.SwiftHashSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SwiftCollections.SwiftHashSet`1"/> class with serialized data.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:SwiftCollections.SwiftHashSet`1.Count">
            <summary>
            Gets the number of elements contained in the set.
            </summary>
        </member>
        <member name="P:SwiftCollections.SwiftHashSet`1.Comparer">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> object that is used to determine equality for the values in the set.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftHashSet`1.InsertIfNotExists(`0)">
            <summary>
            Adds the specified element to the set if it's not already present.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftHashSet`1.Remove(`0)">
            <summary>
            Removes the specified element from the set.
            </summary>
            <param name="item">The element to remove from the set.</param>
            <returns>
            True if the element is successfully found and removed; otherwise, false.
            </returns>
        </member>
        <member name="M:SwiftCollections.SwiftHashSet`1.Clear">
            <summary>
            Removes all elements from the set.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftHashSet`1.CheckLoadThreshold">
            <summary>
            Ensures that the hash set is resized when the current load factor exceeds the predefined threshold.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftHashSet`1.EnsureCapacity(System.Int32)">
            <summary>
            Ensures that the set can hold up to the specified number of elements without resizing.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftHashSet`1.Resize(System.Int32)">
            <summary>
            Resizes the hash set to the specified capacity, redistributing all entries to maintain efficiency.
            </summary>
            <param name="newSize"></param>
        </member>
        <member name="M:SwiftCollections.SwiftHashSet`1.TrimExcess">
            <summary>
            Sets the capacity of a <see cref="T:SwiftCollections.SwiftHashSet`1"/> to the actual 
            number of elements it contains, rounded up to a nearby next power of 2 value.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftHashSet`1.CalculateAdaptiveResizeFactors(System.Int32)">
            <summary>
             Updates adaptive resize parameters based on the current fill rate to balance memory usage and performance.
            </summary>
            <param name="newSize"></param>
        </member>
        <member name="M:SwiftCollections.SwiftHashSet`1.Initialize(System.Int32)">
            <summary>
            Initializes the hash set with a given capacity, ensuring it starts with an optimal internal structure.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:SwiftCollections.SwiftHashSet`1.Contains(`0)">
            <summary>
            Determines whether the set contains the specified element.
            </summary>
            <param name="item">The element to locate in the set.</param>
            <returns>
            True if the set contains the specified element; otherwise, false.
            </returns>
        </member>
        <member name="M:SwiftCollections.SwiftHashSet`1.TryGetValue(`0,`0@)">
            <summary>
            Searches the set for a given value and returns the equal value it finds, if any.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftHashSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the set to an array, starting at the specified array index.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftHashSet`1.SwitchComparer(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Switches the hash set's comparer and rehashes all entries 
            using the new comparer to redistribute them across <see cref="F:SwiftCollections.SwiftHashSet`1._entries"/>.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftHashSet`1.SwitchToRandomizedComparer">
            <summary>
            Replaces the hash set's comparer with a randomized comparer to mitigate high collision rates.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftHashSet`1.RehashEntries">
            <summary>
            Reconstructs the internal entry structure to align with updated hash codes, ensuring efficient access and storage.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftHashSet`1.FindEntry(`0)">
            <summary>
            Searches for an entry in the hash set by following its probing sequence, returning its index if found.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:SwiftCollections.SwiftHashSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the set.
            </summary>
        </member>
        <member name="T:SwiftCollections.SwiftHashSet`1.SwiftHashSetEnumerator">
            <summary>
            Provides an enumerator for iterating through the elements of the hash set, ensuring consistency during enumeration.
            </summary>
        </member>
        <member name="T:SwiftCollections.SwiftList`1">
            <summary>
            <c>SwiftList&lt;T&gt;</c> is a high-performance, memory-efficient dynamic list designed to outperform
            traditional generic lists in speed-critical applications. 
            <para>
            By utilizing custom growth and
            shrink strategies, SwiftList optimizes memory allocation and minimizes resizing overhead,
            all while maintaining compact storage. With aggressive inlining and optimized algorithms,
            SwiftList delivers faster iteration, insertion, and overall memory management compared to
            standard List. It is ideal for scenarios where predictable performance and minimal
            memory allocations are essential.
            </para>
            <para>
            This implementation is optimized for performance and does not perform versioning checks.
            Modifying the list during enumeration may result in undefined behavior.
            </para>
            </summary>
            <typeparam name="T">Specifies the type of elements in the list.</typeparam>
        </member>
        <member name="F:SwiftCollections.SwiftList`1.DefaultCapacity">
            <summary>
            The default initial capacity of the <see cref="T:SwiftCollections.SwiftList`1"/> if none is specified.
            Used to allocate a reasonable starting size to minimize resizing operations.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftList`1._innerArray">
            <summary>
            The internal array that stores elements of the SwiftList. Resized as needed to
            accommodate additional elements. Not directly exposed outside the list.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftList`1._count">
            <summary>
            The current number of elements in the SwiftList. Represents the total count of
            valid elements stored in the list, also indicating the arrayIndex of the next insertion point.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftList`1._syncRoot">
            <summary>
            An object that can be used to synchronize access to the SwiftList.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new, empty instance of <see cref="T:SwiftCollections.SwiftList`1"/> with the specified initial capacity.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SwiftCollections.SwiftList`1"/> class with elements from the specified collection.
            The collection must have a known count for optimized memory allocation.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the input collection does not have a known count.</exception>
        </member>
        <member name="P:SwiftCollections.SwiftList`1.Capacity">
            <summary>
            Gets the total number of elements the SwiftList can hold without resizing.
            Reflects the current allocated size of the internal array.
            </summary>
        </member>
        <member name="P:SwiftCollections.SwiftList`1.Count">
            <inheritdoc cref="F:SwiftCollections.SwiftList`1._count"/>
        </member>
        <member name="P:SwiftCollections.SwiftList`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified arrayIndex.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftList`1.Add(`0)">
            <summary>
            Adds an object to the end of the SwiftList.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the SwiftList.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the SwiftList.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified arrayIndex of the SwiftList.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes all the elements that match the conditions defined by the specified predicate.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the SwiftList at the specified arrayIndex.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftList`1.Reverse">
            <summary>
            Reverses the order of the elements in the entire <see cref="T:SwiftCollections.SwiftList`1"/>.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftList`1.Sort">
            <summary>
            Sorts the elements in the <see cref="T:SwiftCollections.SwiftList`1"/> using the <see cref="T:System.IComparable"/> interface implementation of each element of the _innerArray.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire <see cref="T:SwiftCollections.SwiftList`1"/> using the specified comparer.
            </summary>
            <param name="comparer">The comparer to use for comparing elements.</param>
        </member>
        <member name="M:SwiftCollections.SwiftList`1.Clear">
            <summary>
            Removes all elements from the <see cref="T:SwiftCollections.SwiftList`1"/>, resetting its count to zero.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftList`1.FastClear">
            <summary>
            Clears the <see cref="T:SwiftCollections.SwiftList`1"/> without releasing the reference to the stored elements.
            Use FastClear() when you want to quickly reset the list without reallocating memory.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftList`1.EnsureCapacity(System.Int32)">
            <summary>
            Ensures that the capacity of <see cref="T:SwiftCollections.SwiftList`1"/> is sufficient to accommodate the specified number of elements.
            The capacity can increase by double to balance memory allocation efficiency and space.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftList`1.TrimExcessCapacity">
            <summary>
            Reduces the capacity of the SwiftList if the element count falls below 50% of the current capacity. 
            Ensures efficient memory usage by resizing the internal array to match the current count when necessary.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftList`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based arrayIndex of the first occurrence within the SwiftList.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftList`1.ToArray">
            <summary>
            Copies the elements of the SwiftList to a new array.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftList`1.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftList`1.Contains(`0)">
            <summary>
            Determines whether an element is in the SwiftList.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftList`1.Swap(System.Int32,System.Int32)">
            <summary>
            Swaps the values of two elements in the SwiftList.
            This method exchanges the values referenced by two variables.
            </summary>
            <param name="indexA">The first element to swap.</param>
            <param name="indexB">The second element to swap.</param>
        </member>
        <member name="M:SwiftCollections.SwiftList`1.CopyTo(SwiftCollections.SwiftList{`0})">
            <summary>
            Copies the elements of the SwiftList to the specified target SwiftList.
            The target list will resize if it lacks sufficient capacity, 
            but retains any existing elements beyond the copied range.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:SwiftCollections.SwiftList`1"/>.
            </summary>
        </member>
        <member name="T:SwiftCollections.SwiftQueue`1">
            <summary>
            <c>SwiftQueue&lt;T&gt;</c> is a high-performance, circular buffer-based queue designed for ultra-low-latency enqueue and dequeue operations.
            <para>
            It leverages power-of-two capacities and bitwise arithmetic to eliminate expensive modulo operations, enhancing performance.
            By managing memory efficiently with a wrap-around technique and custom capacity growth strategies, SwiftQueue minimizes allocations and resizing.
            Aggressive inlining and optimized exception handling further reduce overhead, making SwiftQueue outperform traditional queues,
            especially in scenarios with high-frequency additions and removals.
            </para>
            <para>
            This implementation is optimized for performance and does not perform versioning checks.
            Modifying the queue during enumeration may result in undefined behavior.
            </para>
            </summary>
            <typeparam name="T">Specifies the type of elements in the queue.</typeparam>
        </member>
        <member name="F:SwiftCollections.SwiftQueue`1.DefaultCapacity">
            <summary>
            The default initial capacity of the SwiftQueue if none is specified.
            Used to allocate a reasonable starting size to minimize resizing operations.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftQueue`1._innerArray">
            <summary>
            The internal array that stores elements of the SwiftQueue. Resized as needed to
            accommodate additional elements. Not directly exposed outside the queue.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftQueue`1._count">
            <summary>
            The current number of elements in the SwiftQueue. Represents the total count of
            valid elements stored in the queue, also indicating the arrayIndex of the next insertion point.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftQueue`1._head">
            <summary>
            The arrayIndex of the first element in the queue. Adjusts as elements are dequeued.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftQueue`1._tail">
            <summary>
            The arrayIndex at which the next element will be enqueued, wrapping around as needed.
            </summary>
        </member>
        <member name="P:SwiftCollections.SwiftQueue`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified arrayIndex.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftQueue`1.#ctor">
            <summary>
            Initializes a new, empty instance of SwiftQueue.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new, empty instance of SwiftQueue with the specified initial capacity.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of SwiftQueue that contains elements copied from the provided items.
            </summary>
        </member>
        <member name="P:SwiftCollections.SwiftQueue`1.Count">
            <inheritdoc cref="F:SwiftCollections.SwiftQueue`1._count"/>
        </member>
        <member name="P:SwiftCollections.SwiftQueue`1.Capacity">
            <summary>
            Gets the total number of elements the SwiftQueue can hold without resizing.
            Reflects the current allocated size of the internal array.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftQueue`1.Enqueue(`0)">
            <summary>
            Adds an item to the end of the queue. Automatically resizes the queue if the capacity is exceeded.
            </summary>
            <param name="item">The item to add to the queue.</param>
        </member>
        <member name="M:SwiftCollections.SwiftQueue`1.Dequeue">
            <summary>
            Removes and returns the item at the front of the queue. 
            Throws an InvalidOperationException if the queue is empty.
            </summary>
            <returns>The item at the front of the queue.</returns>
        </member>
        <member name="M:SwiftCollections.SwiftQueue`1.Peek">
            <summary>
            Returns the item at the front of the queue without removing it. 
            Throws an InvalidOperationException if the queue is empty.
            </summary>
            <returns>The item at the front of the queue.</returns>
        </member>
        <member name="M:SwiftCollections.SwiftQueue`1.PeekTail">
            <summary>
            Returns the item at the end of the queue without removing it. 
            Throws an InvalidOperationException if the queue is empty.
            </summary>
            <returns>The item at the end of the queue.</returns>
        </member>
        <member name="M:SwiftCollections.SwiftQueue`1.Clear">
            <summary>
            Removes all elements from the SwiftQueue, resetting its count to zero.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftQueue`1.FastClear">
            <summary>
            Clears the SwiftQueue without releasing the reference to the stored elements.
            Use FastClear() when you want to quickly reset the list without reallocating memory.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftQueue`1.Resize(System.Int32)">
            <summary>
            Ensures that the capacity of the queue is sufficient to accommodate the specified number of elements.
            The capacity increases to the next power of two greater than or equal to the required minimum capacity.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftQueue`1.TrimExcessCapacity">
            <summary>
            Reduces the capacity of the SwiftQueue if the element count is significantly less than the current capacity.
            This method resizes the internal array to the next power of two greater than or equal to the current count,
            optimizing memory usage.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftQueue`1.ToArray">
            <summary>
            Copies the elements of the SwiftQueue to a new array.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftQueue`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the SwiftList.
            </summary>
        </member>
        <member name="T:SwiftCollections.SwiftSortedList`1">
            <summary>
            Represents a dynamically sorted collection of elements.
            Provides efficient O(log n) operations for adding, removing, and checking for the presence of elements.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
        </member>
        <member name="F:SwiftCollections.SwiftSortedList`1.DefaultCapacity">
            <summary>
            The default initial capacity of the <see cref="T:SwiftCollections.SwiftSortedList`1"/> if none is specified.
            Used to allocate a reasonable starting size to minimize resizing operations.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftSortedList`1._innerArray">
            <summary>
            Represents the internal array that stores the sorted elements.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftSortedList`1._offset">
            <summary>
            The offset within the internal array where the logical start of the list begins.
            Used to efficiently manage insertions and deletions at both ends without excessive shifting.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftSortedList`1._version">
            <summary>
            A version counter used to track modifications to the sorted list.
            Incremented on mutations to detect changes during enumeration and ensure enumerator validity.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftSortedList`1._comparer">
            <summary>
            The comparer used to sort and compare elements in the collection.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftSortedList`1._syncRoot">
            <summary>
            An object that can be used to synchronize access to the SwiftList.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftSortedList`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new, empty instance of <see cref="T:SwiftCollections.SwiftSortedList`1"/> uisng the specified <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftSortedList`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new, empty instance of <see cref="T:SwiftCollections.SwiftSortedList`1"/> with the specified initial capacity and <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
            <param name="capacity">The starting initial capacity.</param>
            <param name="comparer">The comparer to use. If null, the default comparer is used.</param>
        </member>
        <member name="M:SwiftCollections.SwiftSortedList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SwiftCollections.SwiftList`1"/> class with elements from the specified collection.
            The collection must have a known count for optimized memory allocation.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the input collection does not have a known count.</exception>
        </member>
        <member name="P:SwiftCollections.SwiftSortedList`1.Count">
            <summary>
            Gets the number of elements in the sorter.
            </summary>
        </member>
        <member name="P:SwiftCollections.SwiftSortedList`1.Capacity">
            <summary>
            Gets the current capacity of the internal array.
            </summary>
        </member>
        <member name="P:SwiftCollections.SwiftSortedList`1.Comparer">
            <summary>
            The comparer used to sort elements in the collection.
            </summary>
        </member>
        <member name="P:SwiftCollections.SwiftSortedList`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified arrayIndex.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftSortedList`1.Insert(`0,System.Int32)">
            <summary>
            Inserts an item into the internal array at the specified arrayIndex, shifting elements as needed.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftSortedList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of elements to the collection, ensuring they are sorted and merged efficiently.
            </summary>
            <remarks>
            This will compact the array for efficiency.
            </remarks>
        </member>
        <member name="M:SwiftCollections.SwiftSortedList`1.PopMin">
            <summary>
            Removes and returns the minimum element in the sorter.
            </summary>
            <returns>The minimum element.</returns>
        </member>
        <member name="M:SwiftCollections.SwiftSortedList`1.PopMax">
            <summary>
            Removes and returns the maximum element in the sorter.
            </summary>
            <returns>The maximum element.</returns>
        </member>
        <member name="M:SwiftCollections.SwiftSortedList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified arrayIndex from the sorted list.
            Shifts elements as needed to maintain the sorted order and efficient space utilization.
            </summary>
            <param name="index">The zero-based arrayIndex of the element to remove.</param>
        </member>
        <member name="M:SwiftCollections.SwiftSortedList`1.FastClear">
            <summary>
            Quickly clears the list by resetting the count and offset without modifying the internal array.
            Note: This leaves references in the internal array, which may prevent garbage collection of reference types.
            Use when performance is critical and you are certain that residual references are acceptable.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftSortedList`1.EnsureCapacity(System.Int32)">
            <summary>
            Ensures that the capacity of <see cref="T:SwiftCollections.SwiftSortedList`1"/> is sufficient to accommodate the specified number of elements.
            The capacity can increase by double to balance memory allocation efficiency and space.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftSortedList`1.Resize(System.Int32)">
            <summary>
            Ensures that the capacity of <see cref="T:SwiftCollections.SwiftSortedList`1"/> is sufficient to accommodate the specified number of elements.
            The capacity can increase by double to balance memory allocation efficiency and space.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftSortedList`1.RecenterArray">
            <summary>
            Recenters the elements within the internal array to balance available space on both ends.
            This minimizes the need for shifting elements during future insertions and deletions.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftSortedList`1.GetPhysicalIndex(System.Int32)">
            <summary>
            Converts a logical arrayIndex within the list to the corresponding physical arrayIndex in the internal array.
            </summary>
            <param name="logicalIndex">The logical arrayIndex within the list.</param>
            <returns>The physical arrayIndex within the internal array.</returns>
        </member>
        <member name="M:SwiftCollections.SwiftSortedList`1.PeekMin">
            <summary>
            Returns the minimum element in the sorter without removing it.
            </summary>
            <returns>The minimum element.</returns>
        </member>
        <member name="M:SwiftCollections.SwiftSortedList`1.PeekMax">
            <summary>
            Returns the maximum element in the sorter without removing it.
            </summary>
            <returns>The maximum element.</returns>
        </member>
        <member name="M:SwiftCollections.SwiftSortedList`1.IndexOf(`0)">
            <summary>
            Searches for the specified item in the sorted collection and returns the arrayIndex of the first occurrence.
            </summary>
            <param name="item">The item to search for.</param>
            <returns>The zero-based arrayIndex of the item if found; otherwise, -1.</returns>
        </member>
        <member name="M:SwiftCollections.SwiftSortedList`1.InsertionPoint(`0)">
            <summary>
            Determines the insertion point for a specified item in the collection.
            The insertion point is the arrayIndex where the item would be inserted if it were not already present.
            </summary>
            <param name="item">The item for which to find the insertion point.</param>
            <returns>The insertion point as a zero-based arrayIndex.</returns>
        </member>
        <member name="M:SwiftCollections.SwiftSortedList`1.Search(`0)">
            <summary>
            Searches for the specified item in the sorted collection.
            </summary>
            <param name="item">The item to search for.</param>
            <returns>
            The arrayIndex of the item if found or where the item should be inserted if not found.
            </returns>
        </member>
        <member name="M:SwiftCollections.SwiftSortedList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through <see cref="T:SwiftCollections.SwiftSortedList`1"/>.
            </summary>
        </member>
        <member name="T:SwiftCollections.SwiftStack`1">
            <summary>
            Represents a fast, array-based stack (LIFO - Last-In-First-Out) collection of objects.
            <para>
            The <c>SwiftStack&lt;T&gt;</c> class provides O(1) time complexity for <c>Push</c> and <c>Pop</c> operations,
            making it highly efficient for scenarios where performance is critical.
            It minimizes memory allocations by reusing internal arrays and offers methods
            like <c>FastClear</c> to quickly reset the stack without deallocating memory.
            </para>
            <para>
            This implementation is optimized for performance and does not perform versioning checks.
            Modifying the stack during enumeration may result in undefined behavior.
            </para>
            </summary>
            <typeparam name="T">Specifies the type of elements in the stack.</typeparam>
        </member>
        <member name="F:SwiftCollections.SwiftStack`1.DefaultCapacity">
            <summary>
            The default initial capacity of the SwiftStack if none is specified.
            Used to allocate a reasonable starting size to minimize resizing operations.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftStack`1._innerArray">
            <summary>
            The internal array that stores elements of the SwiftStack. Resized as needed to
            accommodate additional elements. Not directly exposed outside the stack.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftStack`1._count">
            <summary>
            The current number of elements in the SwiftStack. Represents the total count of
            valid elements stored in the stack, also indicating the arrayIndex of the next insertion point.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftStack`1.#ctor">
            <summary>
            Initializes a new, empty instance of SwiftStack.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftStack`1.#ctor(System.Int32)">
            <summary>
            Initializes a new, empty instance of SwiftStack with the specified initial capacity.
            </summary>
        </member>
        <member name="P:SwiftCollections.SwiftStack`1.Count">
            <inheritdoc cref="F:SwiftCollections.SwiftStack`1._count"/>
        </member>
        <member name="P:SwiftCollections.SwiftStack`1.Capacity">
            <summary>
            Gets the total number of elements the SwiftQueue can hold without resizing.
            Reflects the current allocated size of the internal array.
            </summary>
        </member>
        <member name="P:SwiftCollections.SwiftStack`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified arrayIndex.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftStack`1.Push(`0)">
            <summary>
            Inserts an object at the top of the SwiftStack.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:SwiftCollections.SwiftStack`1.Pop">
            <summary>
            Removes and returns the object at the top of the SwiftStack.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwiftCollections.SwiftStack`1.Clear">
            <summary>
            Removes all elements from the SwiftStack, resetting its count to zero.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftStack`1.FastClear">
            <summary>
            Clears the SwiftStack without releasing the reference to the stored elements.
            Use FastClear() when you want to quickly reset the list without reallocating memory.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftStack`1.Resize(System.Int32)">
            <summary>
            Ensures that the capacity of the stack is sufficient to accommodate the specified number of elements.
            The stack capacity can increase by double to balance memory allocation efficiency and space.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftStack`1.TrimCapacity">
            <summary>
            Sets the capacity of a <see cref="T:SwiftCollections.SwiftStack`1"/> to the actual 
            number of elements it contains, rounded up to a nearby next power of 2 value.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftStack`1.Peek">
            <summary>
            Returns the object at the top of the SwiftStack without removing it.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SwiftCollections.HashHelper">
            <summary>
            Provides helper methods and constants for hashing and power of two calculations used in hash-based collections.
            </summary>
        </member>
        <member name="F:SwiftCollections.HashHelper.rng">
            <summary>
            Provides a cryptographic random number generator for generating entropy.
            </summary>
        </member>
        <member name="F:SwiftCollections.HashHelper.data">
            <summary>
            Stores random bytes used for entropy generation.
            </summary>
        </member>
        <member name="F:SwiftCollections.HashHelper.currentIndex">
            <summary>
            Tracks the current index in the entropy data buffer.
            </summary>
        </member>
        <member name="F:SwiftCollections.HashHelper.lockObj">
            <summary>
            Synchronization object for thread-safe operations.
            </summary>
        </member>
        <member name="F:SwiftCollections.HashHelper.s_SerializationInfoTable">
            <summary>
            Holds serialization information for objects during the serialization process.
            </summary>
        </member>
        <member name="P:SwiftCollections.HashHelper.SerializationInfoTable">
            <summary>
            Gets the table that stores serialization information for objects.
            </summary>
        </member>
        <member name="M:SwiftCollections.HashHelper.NextPowerOfTwo(System.Int32)">
            <summary>
            Calculates the smallest power of two that is greater than or equal to the specified integer.
            This method is used to ensure that capacities are powers of two, enabling optimizations
            in indexing operations through bitwise arithmetic.
            </summary>
            <param name="value">The integer value for which to find the next power of two.</param>
            <returns>The smallest power of two greater than or equal to <paramref name="value"/>.</returns>
            <remarks>
            If <paramref name="value"/> is less than or equal to zero, the method returns 1.
            If <paramref name="value"/> is too large to represent as a power of two within an <c>int</c>,
            the methods returns `int.Max`.
            </remarks>
        </member>
        <member name="M:SwiftCollections.HashHelper.GetEntropy">
            <summary>
            Generates a cryptographically strong random 64-bit integer for use as entropy.
            </summary>
            <returns>A 64-bit integer filled with cryptographically strong random bytes.</returns>
        </member>
        <member name="M:SwiftCollections.HashHelper.MurmurHash3(System.String,System.Int32)">
            <summary>
            Computes a hash code for a string using the MurmurHash3 algorithm, incorporating entropy for randomization.
            </summary>
            <param name="key">The string to hash.</param>
            <param name="seed">The seed value for the hash function.</param>
            <returns>An integer hash code for the string.</returns>
        </member>
        <member name="T:SwiftCollections.IntStack">
            <summary>
            A minimal and efficient stack implementation for integers.
            Optimized for internal use in within the SwiftCollections library.
            </summary>
        </member>
        <member name="F:SwiftCollections.IntStack.DefaultCapacity">
            <summary>
            The default initial capacity of the stack.
            </summary>
        </member>
        <member name="F:SwiftCollections.IntStack._array">
            <summary>
            The internal array holding stack elements.
            </summary>
        </member>
        <member name="F:SwiftCollections.IntStack._count">
            <summary>
            The current count of elements in the stack.
            </summary>
        </member>
        <member name="M:SwiftCollections.IntStack.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SwiftCollections.IntStack"/> class with the default capacity.
            </summary>
        </member>
        <member name="M:SwiftCollections.IntStack.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SwiftCollections.IntStack"/> class with a specified initial capacity.
            </summary>
            <param name="capacity">The initial capacity of the stack.</param>
        </member>
        <member name="P:SwiftCollections.IntStack.Count">
            <summary>
            Gets the number of elements currently in the stack.
            </summary>
        </member>
        <member name="M:SwiftCollections.IntStack.Push(System.Int32)">
            <summary>
            Pushes an integer onto the stack.
            Expands the stack's capacity if necessary.
            </summary>
            <param name="value">The integer value to push.</param>
        </member>
        <member name="M:SwiftCollections.IntStack.Pop">
            <summary>
            Removes and returns the top integer from the stack.
            </summary>
            <returns>The top integer from the stack.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when attempting to pop from an empty stack.</exception>
        </member>
        <member name="M:SwiftCollections.IntStack.Peek">
            <summary>
            Returns the top integer from the stack without removing it.
            </summary>
            <returns>The top integer from the stack.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when attempting to peek an empty stack.</exception>
        </member>
        <member name="M:SwiftCollections.IntStack.Reset">
            <summary>
            Resets the stack to it's initial state.
            </summary>
        </member>
        <member name="M:SwiftCollections.IntStack.Clear">
            <summary>
            Removes all elements from the stack.
            </summary>
        </member>
        <member name="M:SwiftCollections.IntStack.EnsureCapacity(System.Int32)">
            <summary>
            Ensures the stack has at least the specified capacity.
            Expands the internal array if necessary.
            </summary>
            <param name="capacity">The minimum capacity to ensure.</param>
        </member>
        <member name="T:SwiftCollections.SwiftObjectEqualityComparer">
            <summary>
            Provides a randomized equality comparer for objects, enhancing hash code distribution to reduce collisions in hash-based collections.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftObjectEqualityComparer._entropy">
            <summary>
            A 64-bit entropy value used to randomize hash codes for better distribution.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftObjectEqualityComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SwiftCollections.SwiftStringEqualityComparer"/> class with a unique entropy value.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftObjectEqualityComparer.Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><c>true</c> if the specified objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SwiftCollections.SwiftObjectEqualityComparer.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current comparer.
            </summary>
            <param name="obj">The object to compare with the current comparer.</param>
            <returns><c>true</c> if the specified object is equal to the current comparer; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SwiftCollections.SwiftObjectEqualityComparer.GetHashCode(System.Object)">
            <summary>
            Returns a hash code for the specified object, incorporating entropy for better distribution.
            </summary>
            <param name="obj">The object for which to get a hash code.</param>
            <returns>A hash code for the specified object.</returns>
        </member>
        <member name="M:SwiftCollections.SwiftObjectEqualityComparer.GetHashCode">
            <summary>
            Returns a hash code for the current comparer.
            </summary>
            <returns>A hash code for the current comparer.</returns>
        </member>
        <member name="T:SwiftCollections.SwiftStringEqualityComparer">
            <summary>
            Provides a randomized equality comparer for objects, enhancing hash code distribution to reduce collisions in hash-based collections.
            </summary>
        </member>
        <member name="F:SwiftCollections.SwiftStringEqualityComparer._entropy">
            <summary>
            A 64-bit entropy value used to randomize hash codes for better distribution.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftStringEqualityComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SwiftCollections.SwiftStringEqualityComparer"/> class with a unique entropy value.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftStringEqualityComparer.Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><c>true</c> if the specified objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SwiftCollections.SwiftStringEqualityComparer.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current comparer.
            </summary>
            <param name="obj">The object to compare with the current comparer.</param>
            <returns><c>true</c> if the specified object is equal to the current comparer; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SwiftCollections.SwiftStringEqualityComparer.GetHashCode(System.Object)">
            <summary>
            Returns a hash code for the specified object, incorporating entropy for better distribution.
            </summary>
            <param name="obj">The object for which to get a hash code.</param>
            <returns>A hash code for the specified object.</returns>
        </member>
        <member name="M:SwiftCollections.SwiftStringEqualityComparer.GetHashCode">
            <summary>
            Returns a hash code for the current comparer.
            </summary>
            <returns>A hash code for the current comparer.</returns>
        </member>
        <member name="T:SwiftCollections.SwiftExtensions">
            <summary>
            Provides extension methods for collection manipulation and utility functions.
            </summary>
        </member>
        <member name="M:SwiftCollections.SwiftExtensions.Populate``1(``0[],System.Func{``0})">
            <summary>
            Populates an array with values generated by a specified provider function.
            </summary>
            <typeparam name="T">The type of the elements in the array.</typeparam>
            <param name="array">The array to populate.</param>
            <param name="provider">A function that generates a value for each element in the array.</param>
            <returns>The populated array.</returns>
        </member>
        <member name="M:SwiftCollections.SwiftExtensions.Populate``1(``0[],System.Func{System.Int32,``0})">
            <summary>
            Populates an array with values generated by a provider function that accepts the current index.
            </summary>
            <typeparam name="T">The type of the elements in the array.</typeparam>
            <param name="array">The array to populate.</param>
            <param name="provider">A function that generates a value for each element based on its index.</param>
            <returns>The populated array.</returns>
        </member>
        <member name="M:SwiftCollections.SwiftExtensions.Populate``1(``0[])">
            <summary>
            Populates an array with new instances of the specified type. 
            The type must have a parameterless constructor.
            </summary>
            <typeparam name="T">The type of the elements in the array.</typeparam>
            <param name="array">The array to populate.</param>
            <returns>The populated array.</returns>
        </member>
        <member name="M:SwiftCollections.SwiftExtensions.TryIndex``1(``0[],System.Int32,``0@)">
            <summary>
            Attempts to retrieve an element from the array at the specified index.
            Returns true if the index is valid and the element is retrieved; otherwise, returns false.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">The array from which to retrieve the element.</param>
            <param name="index">The index of the element to retrieve.</param>
            <param name="result">
            When this method returns, contains the element at the specified index if the index is valid;
            otherwise, the default value for the type of the element.
            </param>
            <returns>
            True if the element at the specified index was retrieved successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:SwiftCollections.SwiftExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
            An iterator that yields the elements of the source collection in a random order using the specified random number generator.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="source">The collection to shuffle.</param>
            <param name="rng">The random number generator to use for shuffling.</param>
            <returns>An iterator that yields the shuffled elements.</returns>
        </member>
        <member name="M:SwiftCollections.SwiftExtensions.ShuffleInPlace``1(System.Collections.Generic.IList{``0},System.Random)">
            <summary>
            Shuffles the elements of the list in place using the specified random number generator.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The list to shuffle.</param>
            <param name="rng">The random number generator to use for shuffling.</param>
        </member>
        <member name="M:SwiftCollections.SwiftExtensions.IsPopulated``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether a sequence contains any elements.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"> The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to check for emptiness.</param>
            <returns>
            true if the source sequence contains any elements; otherwise, false.
            </returns>
        </member>
        <member name="M:SwiftCollections.SwiftExtensions.IsPopulatedSafe``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the collection is not null and contains any elements.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="source">The collection to check.</param>
            <returns>
            True if the collection is not null and contains at least one element; otherwise, false.
            </returns>
        </member>
        <member name="T:LazyDisposable`1">
            <summary>
            A lazily initialized disposable object.
            This class extends <see cref="T:System.Lazy`1"/> to support <see cref="T:System.IDisposable"/> objects,
            ensuring proper resource cleanup when disposed.
            </summary>
            <typeparam name="T">The type of the lazily initialized object, which must implement <see cref="T:System.IDisposable"/>.</typeparam>
        </member>
        <member name="F:LazyDisposable`1._disposed">
            <summary>
            Indicates whether the lazy instance has been disposed.
            Prevents multiple disposal attempts, ensuring safe resource cleanup.
            </summary>
        </member>
        <member name="M:LazyDisposable`1.#ctor">
            <summary>
             Initializes a new instance of the <see cref="T:LazyDisposable`1"/> class.
             When lazy initialization occurs, the default constructor is used.
            </summary>
        </member>
        <member name="M:LazyDisposable`1.#ctor(System.Boolean)">
            <summary>
             Initializes a new instance of the <see cref="T:LazyDisposable`1"/> class.
             When lazy initialization occurs, the default constructor of the target type
             and the specified initialization mode are used.
            </summary>
            <param name="isThreadSafe">
             true to make this instance usable concurrently by multiple threads;
             false to make the instance usable by only one thread at a time. 
            </param>
        </member>
        <member name="M:LazyDisposable`1.#ctor(System.Threading.LazyThreadSafetyMode)">
            <summary>
             Initializes a new instance of the <see cref="T:LazyDisposable`1"/> class
             that uses the default constructor of T and the specified thread-safety mode.
            </summary>
            <param name="mode">
             One of the enumeration values that specifies the thread safety mode. 
            </param>
        </member>
        <member name="M:LazyDisposable`1.#ctor(System.Func{`0})">
            <summary>
             Initializes a new instance of the <see cref="T:LazyDisposable`1"/> class.
             When lazy initialization occurs, the specified initialization function is used.
            </summary>
            <param name="valueFactory">
             The delegate that is invoked to produce the lazily initialized value when it is needed. 
            </param>
        </member>
        <member name="M:LazyDisposable`1.#ctor(System.Func{`0},System.Boolean)">
            <summary>
             Initializes a new instance of the <see cref="T:LazyDisposable`1"/> class.
             When lazy initialization occurs, the specified initialization function
             and initialization mode are used.
            </summary>
            <param name="valueFactory">
             The delegate that is invoked to produce the lazily initialized value when it is needed. 
            </param>
            <param name="isThreadSafe">
             true to make this instance usable concurrently by multiple threads;
             false to make this instance usable by only one thread at a time. 
            </param>
        </member>
        <member name="M:LazyDisposable`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
            <summary>
             Initializes a new instance of the <see cref="T:LazyDisposable`1"/> class
             using the specified initialization function and thread-safety mode.
            </summary>
            <param name="valueFactory">
             The delegate that is invoked to produce the lazily initialized value when it is needed. 
            </param>
            <param name="mode">
             One of the enumeration values that specifies the thread safety mode. 
            </param>
        </member>
        <member name="M:LazyDisposable`1.Dispose">
            <summary>
            Disposes the lazily initialized value if it has been created.
            Ensures that disposal is only performed once.
            </summary>
        </member>
        <member name="M:LazyDisposable`1.Finalize">
            <summary>
            Finalizer to ensure disposal if Dispose() is never called.
            </summary>
        </member>
    </members>
</doc>
